     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT	"WCOFF"] 		;	制作目标文件的模式
     5 00000000                                 [INSTRSET	"i486p"]	; 表明该程序是给486使用的
     6 00000000                                 [BITS	32]						;	制作32位模式用的机械语言
     7 00000000                                 
     8 00000000                                 ; 制作目标文件的信息
     9 00000000                                 [FILE	"naskfunc.nas"]	; 源文件名信息
    10 00000000                                 	; 程序中包含的函数名
    11 00000000                                 	GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    12 00000000                                 	GLOBAL	_io_in8, _io_in16, _io_in32
    13 00000000                                 	GLOBAL	_io_out8, _io_out16, _io_out32
    14 00000000                                 	GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 ; 以下是实际的函数
    16                                          [SECTION .text]			; 目标文件中写了这些之后再写程序
    17 00000000                                 
    18 00000000                                 _io_hlt:			; void io_hlt(void);
    19 00000000 F4                              	HLT
    20 00000001 C3                              	RET
    21 00000002                                 
    22 00000002                                 _io_cli:			; void io_cli(void);
    23 00000002 FA                              	CLI
    24 00000003 C3                              	RET
    25 00000004                                 
    26 00000004                                 _io_sti:			; void io_sti(void);
    27 00000004 FB                              	STI
    28 00000005 C3                              	RET	
    29 00000006                                 
    30 00000006                                 _io_stihlt:		;	void io_stihlt(void);
    31 00000006 FB                              	STI
    32 00000007 F4                              	HLT
    33 00000008 C3                              	RET
    34 00000009                                 
    35 00000009                                 _io_in8:			; void io_in8(int port);
    36 00000009 8B 54 24 04                     	mov	EDX,	[ESP+4]
    37 0000000D B8 00000000                     	mov	EAX,	0
    38 00000012 EC                              	in	AL,	DX
    39 00000013 C3                              	RET	
    40 00000014                                 
    41 00000014                                 _io_in16:			; int	io_in16(int port);
    42 00000014 8B 54 24 04                     	mov	EDX,	[ESP+4]
    43 00000018 B8 00000000                     	mov	EAX,	0
    44 0000001D 66 ED                           	in	AX,	DX
    45 0000001F C3                              	RET
    46 00000020                                 
    47 00000020                                 _io_in32:			; int io_in32(int port);
    48 00000020 8B 54 24 04                     	mov	EDX,	[ESP+4]
    49 00000024 ED                              	in	EAX,	DX
    50 00000025 C3                              	RET
    51 00000026                                 
    52 00000026                                 _io_out8:			; void io_out8(int port, int data);
    53 00000026 8B 54 24 04                     	mov	EDX,	[ESP+4]		; port
    54 0000002A 8A 44 24 08                     	mov	AL,	[ESP+8]			;	data
    55 0000002E EE                              	out	DX,AL
    56 0000002F C3                              	RET
    57 00000030                                 
    58 00000030                                 _io_out16:		; void io_out16(int port,int data);
    59 00000030 8B 54 24 04                     	mov	EDX,	[ESP+4]
    60 00000034 8B 44 24 08                     	mov	EAX,	[ESP+8]
    61 00000038 66 EF                           	out	DX,AX
    62 0000003A C3                              	RET
    63 0000003B                                 
    64 0000003B                                 _io_out32:		; void io_out32(int port, int data);
    65 0000003B 8B 54 24 04                     	mov	EDX,	[ESP+4]
    66 0000003F 8B 44 24 08                     	mov	EAX,	[ESP+8]
    67 00000043 EF                              	out	DX,	EAX
    68 00000044 C3                              	RET
    69 00000045                                 
    70 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    71 00000045 9C                              	PUSHFD
    72 00000046 58                              	POP	EAX
    73 00000047 C3                              	RET
    74 00000048                                 
    75 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    76 00000048 8B 44 24 04                     	mov	EAX,	[ESP+4]
    77 0000004C 50                              	PUSH	EAX
    78 0000004D 9D                              	POPFD	
    79 0000004E C3                              	RET
    80 0000004F                                 	
